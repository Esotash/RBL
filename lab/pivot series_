{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPH4TdF2hMMEklxRxIDpbCz"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":35,"metadata":{"id":"xsJN3PAyNy-U","executionInfo":{"status":"ok","timestamp":1726850936515,"user_tz":-330,"elapsed":11,"user":{"displayName":"Pranav Bhavsar","userId":"03342781595821087385"}}},"outputs":[],"source":["# Import necessary libraries\n","import yfinance as yf\n","import torch\n","import torch.nn as nn\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_squared_error\n","from sklearn.preprocessing import MinMaxScaler"]},{"cell_type":"code","source":["# Download Nifty 50 data Inc.\n","import yfinance as yf\n","NIFTY_data = yf.download('^NSEI', start='2014-01-01', end='2024-03-30')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BH-b56fXOC0p","executionInfo":{"status":"ok","timestamp":1726850936516,"user_tz":-330,"elapsed":11,"user":{"displayName":"Pranav Bhavsar","userId":"03342781595821087385"}},"outputId":"0f628c3b-ad0f-4764-98a6-f2bf97d1f611"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stderr","text":["\r[*********************100%***********************]  1 of 1 completed\n"]}]},{"cell_type":"code","source":["# prompt: TO SHOW THE DOWNLOADED DATA\n","\n","print(NIFTY_data.head())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WdfiUMRMOQHy","executionInfo":{"status":"ok","timestamp":1726850936516,"user_tz":-330,"elapsed":10,"user":{"displayName":"Pranav Bhavsar","userId":"03342781595821087385"}},"outputId":"7a7f8f2f-8aa2-4a3f-dd88-2134dfb267f7"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["                   Open         High          Low        Close    Adj Close  \\\n","Date                                                                          \n","2014-01-02  6301.250000  6358.299805  6211.299805  6221.149902  6221.149902   \n","2014-01-03  6194.549805  6221.700195  6171.250000  6211.149902  6211.149902   \n","2014-01-06  6220.850098  6224.700195  6170.250000  6191.450195  6191.450195   \n","2014-01-07  6203.899902  6221.500000  6144.750000  6162.250000  6162.250000   \n","2014-01-08  6178.049805  6192.100098  6160.350098  6174.600098  6174.600098   \n","\n","            Volume  \n","Date                \n","2014-01-02  158100  \n","2014-01-03  139000  \n","2014-01-06  118300  \n","2014-01-07  138600  \n","2014-01-08  146900  \n"]}]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import yfinance as yf\n","import datetime\n","import plotly.graph_objects as go\n","import math\n","from sklearn.linear_model import LinearRegression"],"metadata":{"id":"Gt2D-phAWci2","executionInfo":{"status":"ok","timestamp":1726851174990,"user_tz":-330,"elapsed":616,"user":{"displayName":"Pranav Bhavsar","userId":"03342781595821087385"}}},"execution_count":61,"outputs":[]},{"cell_type":"code","source":["import datetime\n","import yfinance as yf\n","\n","ticker = \"^NSEI\"\n","start_date = '2014-01-01'\n","end_date = '2024-03-30'\n","\n","# Download data from Yahoo Finance\n","df = yf.download(ticker, start=start_date, end=end_date)\n","\n","# Sort by date and reset index\n","df.sort_values(by='Date', inplace=True, ascending=True)\n","df.reset_index(inplace=True)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yNyRFBhiU65z","executionInfo":{"status":"ok","timestamp":1726851175577,"user_tz":-330,"elapsed":5,"user":{"displayName":"Pranav Bhavsar","userId":"03342781595821087385"}},"outputId":"2168b000-eabe-4ada-dfd6-68809f67b58f"},"execution_count":62,"outputs":[{"output_type":"stream","name":"stderr","text":["\r[*********************100%***********************]  1 of 1 completed\n"]}]},{"cell_type":"code","source":["global_slope_up = 0.1\n","global_slope_down = -0.1\n","threshold_value = 0.02\n","PEAK, VALLEY = 1, -1"],"metadata":{"id":"s3A_eU3yOe0W","executionInfo":{"status":"ok","timestamp":1726851175577,"user_tz":-330,"elapsed":2,"user":{"displayName":"Pranav Bhavsar","userId":"03342781595821087385"}}},"execution_count":63,"outputs":[]},{"cell_type":"code","source":["def _identify_initial_pivot(X, up_thresh, down_thresh):\n","    x_0 = X[0]\n","    max_x = x_0\n","    max_t = 0\n","    min_x = x_0\n","    min_t = 0\n","    up_thresh += 1\n","    down_thresh += 1\n","\n","    for t in range(1, len(X)):\n","        x_t = X[t]\n","\n","        if x_t / min_x >= up_thresh:\n","            return VALLEY if min_t == 0 else PEAK\n","\n","        if x_t / max_x <= down_thresh:\n","            return PEAK if max_t == 0 else VALLEY\n","\n","        if x_t > max_x:\n","            max_x = x_t\n","            max_t = t\n","\n","        if x_t < min_x:\n","            min_x = x_t\n","            min_t = t\n","\n","    t_n = len(X)-1\n","    return VALLEY if x_0 < X[t_n] else PEAK"],"metadata":{"id":"wTOr0k36T8mC","executionInfo":{"status":"ok","timestamp":1726851175578,"user_tz":-330,"elapsed":3,"user":{"displayName":"Pranav Bhavsar","userId":"03342781595821087385"}}},"execution_count":64,"outputs":[]},{"cell_type":"code","source":["def calculate_pivot_points(close, high, low, up_thresh, down_thresh):\n","\n","\n","    initial_pivot = _identify_initial_pivot(close, up_thresh, down_thresh)\n","\n","    t_n = len(close)\n","    pivots = np.zeros(t_n, dtype='i1')\n","    pivots[0] = initial_pivot\n","\n","    up_thresh += 1\n","    down_thresh += 1\n","\n","    trend = -initial_pivot\n","    last_pivot_t = 0\n","    last_pivot_x = close[0]\n","    for t in range(1, len(close)):\n","\n","        if trend == -1:\n","            x = low[t]\n","            r = x / last_pivot_x\n","            if r >= up_thresh:\n","                pivots[last_pivot_t] = trend\n","                trend = 1\n","                last_pivot_x = high[t]\n","                last_pivot_t = t\n","            elif x < last_pivot_x:\n","                last_pivot_x = x\n","                last_pivot_t = t\n","        else:\n","            x = high[t]\n","            r = x / last_pivot_x\n","            if r <= down_thresh:\n","                pivots[last_pivot_t] = trend\n","                trend = -1\n","                last_pivot_x = low[t]\n","                last_pivot_t = t\n","            elif x > last_pivot_x:\n","                last_pivot_x = x\n","                last_pivot_t = t\n","\n","\n","    if last_pivot_t == t_n-1:\n","        pivots[last_pivot_t] = trend\n","    elif pivots[t_n-1] == 0:\n","        pivots[t_n-1] = trend\n","\n","    return pivots"],"metadata":{"id":"jqYTKkTYUbdn","executionInfo":{"status":"ok","timestamp":1726851175578,"user_tz":-330,"elapsed":2,"user":{"displayName":"Pranav Bhavsar","userId":"03342781595821087385"}}},"execution_count":65,"outputs":[]},{"cell_type":"code","source":["def find_patterns(df):\n","    prev_high = float('-inf')\n","    prev_low = float('inf')\n","    high_patterns = []\n","    low_patterns=[]\n","\n","    for index, row in df.iterrows():\n","        high = row['High']\n","        low = row['Low']\n","        pivot = row['Pivots']\n","\n","        if pivot == 1:\n","            if high > prev_high:\n","                high_pattern = \"HH\"\n","                low_pattern = None\n","                prev_high = high\n","            else:\n","                high_pattern = \"LH\"\n","                low_pattern = None\n","                prev_high = high\n","        elif pivot == -1:\n","            if low > prev_low:\n","                high_pattern = None\n","                low_pattern = \"HL\"\n","                prev_low = low\n","            else:\n","                high_pattern = None\n","                low_pattern = \"LL\"\n","                prev_low = low\n","\n","        else:\n","            high_pattern = None\n","            low_pattern = None\n","\n","        high_patterns.append(high_pattern)\n","        low_patterns.append(low_pattern)\n","\n","    df['High_pattern'] = high_patterns\n","    df['Low_pattern'] = low_patterns"],"metadata":{"id":"XD-CKcWsUeUH","executionInfo":{"status":"ok","timestamp":1726851176253,"user_tz":-330,"elapsed":3,"user":{"displayName":"Pranav Bhavsar","userId":"03342781595821087385"}}},"execution_count":66,"outputs":[]},{"cell_type":"code","source":["#library prerequisites\n","import numpy as np\n","import pandas as pd\n","import yfinance as yf\n","import datetime\n","import plotly.graph_objects as go\n","import math\n","from sklearn.linear_model import LinearRegression\n"],"metadata":{"id":"G7aQn7ZHUp-x","executionInfo":{"status":"ok","timestamp":1726851176253,"user_tz":-330,"elapsed":3,"user":{"displayName":"Pranav Bhavsar","userId":"03342781595821087385"}}},"execution_count":67,"outputs":[]},{"cell_type":"code","source":["pivots = calculate_pivot_points(df.Close, df.High, df.Low ,threshold_value,-1*threshold_value)\n","df['Pivots'] = pivots\n","df['Pivot Price'] = np.nan\n","df['Troughs'] = np.nan\n","df.loc[df['Pivots'] == 1, 'Pivot Price'] = df.High\n","df.loc[df['Pivots'] == -1, 'Pivot Price'] = df.Low\n","df.loc[df['Pivots'] == 1, 'Peaks'] = df.High\n","df.loc[df['Pivots'] == -1, 'Troughs'] = df.Low\n","find_patterns(df)\n","df_high=df.dropna(subset=['High_pattern'])\n","df_low=df.dropna(subset=['Low_pattern'])"],"metadata":{"id":"bmgwXVeiUgYy","executionInfo":{"status":"ok","timestamp":1726851177137,"user_tz":-330,"elapsed":886,"user":{"displayName":"Pranav Bhavsar","userId":"03342781595821087385"}}},"execution_count":68,"outputs":[]},{"cell_type":"code","source":["def find_downtrend(df):\n","    df=df.reset_index()\n","    df['Trend_Down'] = None\n","    for i in range(0, len(df)-2):\n","        if df['High_pattern'].iloc[i] == 'HH' and df['Peaks'].iloc[i] > df['Peaks'].iloc[i+1] and df['Peaks'].iloc[i+1] > df['Peaks'].iloc[i+2]:\n","            df.at[i, 'Trend_Down'] = 'down'\n","    for i in range(1, len(df)-2):\n","        if df['Peaks'].iloc[i] > df['Peaks'].iloc[i-1] and df['Peaks'].iloc[i] > df['Peaks'].iloc[i+1] and df['Peaks'].iloc[i+1] > df['Peaks'].iloc[i+2]:\n","            df.at[i, 'Trend_Down'] = 'down'\n","        if df['High_pattern'].iloc[i] == 'LH' and df['High_pattern'].iloc[i-1] == 'HH' and df['High_pattern'].iloc[i+1] == 'LH':\n","            df.at[i, 'Trend_Down'] = 'down'\n","    for i in range(1, len(df)):\n","        if df['Trend_Down'].iloc[i-1] == 'down' and df['High_pattern'].iloc[i] == 'LH':\n","            df.at[i, 'Trend_Down'] = 'down'\n","    return df\n","\n","def find_uptrend(df):\n","    df=df.reset_index()\n","    df['Trend_Up'] = None\n","    for i in range(0, len(df)-2):\n","        if df['Low_pattern'].iloc[i] == 'LL' and df['Troughs'].iloc[i] < df['Troughs'].iloc[i+1] and df['Troughs'].iloc[i+1] < df['Troughs'].iloc[i+2]:\n","            df.at[i, 'Trend_Up'] = 'up'\n","    for i in range(1, len(df)-2):\n","        if df['Troughs'].iloc[i] < df['Troughs'].iloc[i-1] and df['Troughs'].iloc[i] < df['Troughs'].iloc[i+1] and df['Troughs'].iloc[i+1] < df['Troughs'].iloc[i+2]:\n","            df.at[i, 'Trend_Up'] = 'up'\n","        if df['Low_pattern'].iloc[i] == 'HL' and df['Low_pattern'].iloc[i-1] == 'LL' and df['Low_pattern'].iloc[i+1] == 'HL':\n","            df.at[i, 'Trend_Up'] = 'up'\n","    for i in range(1, len(df)):\n","        if df['Trend_Up'].iloc[i-1] == 'up' and df['Low_pattern'].iloc[i] == 'HL':\n","            df.at[i, 'Trend_Up'] = 'up'\n","    return df"],"metadata":{"id":"574FnYypUhzL","executionInfo":{"status":"ok","timestamp":1726851177137,"user_tz":-330,"elapsed":4,"user":{"displayName":"Pranav Bhavsar","userId":"03342781595821087385"}}},"execution_count":69,"outputs":[]},{"cell_type":"code","source":["df_high=find_downtrend(df_high)\n","df_low=find_uptrend(df_low)"],"metadata":{"id":"DRT1FnnKUjtJ","executionInfo":{"status":"ok","timestamp":1726851177138,"user_tz":-330,"elapsed":4,"user":{"displayName":"Pranav Bhavsar","userId":"03342781595821087385"}}},"execution_count":70,"outputs":[]},{"cell_type":"code","source":["def find_consecutive_up_labels(df_low):\n","    line_up_data = []\n","\n","    for i in range(0, len(df_low)-1):\n","        if df_low['Trend_Up'].iloc[i] == 'up' and df_low['Trend_Up'].iloc[i+1] == 'up':\n","            start_timeframe = df_low['Date'].iloc[i]\n","            start_price = df_low['Troughs'].iloc[i]\n","            end_timeframe = df_low['Date'].iloc[i+1]\n","            end_price = df_low['Troughs'].iloc[i+1]\n","            line_up_data.append([start_timeframe, start_price, end_timeframe, end_price])\n","            line_up = pd.DataFrame(line_up_data, columns=['Start Timeframe', 'Start Price', 'End Timeframe', 'End Price'])\n","\n","    return line_up\n","\n","def find_consecutive_down_labels(df_high):\n","    line_down_data = []\n","\n","    for i in range(0, len(df_high)-1):\n","        if df_high['Trend_Down'].iloc[i] == 'down' and df_high['Trend_Down'].iloc[i+1] == 'down':\n","            start_timeframe = df_high['Date'].iloc[i]\n","            start_price = df_high['Peaks'].iloc[i]\n","            end_timeframe = df_high['Date'].iloc[i+1]\n","            end_price = df_high['Peaks'].iloc[i+1]\n","            line_down_data.append([start_timeframe, start_price, end_timeframe, end_price])\n","            line_down = pd.DataFrame(line_down_data, columns=['Start Timeframe', 'Start Price', 'End Timeframe', 'End Price'])\n","\n","    return line_down"],"metadata":{"id":"i-OjaXKZVCXB","executionInfo":{"status":"ok","timestamp":1726851177138,"user_tz":-330,"elapsed":4,"user":{"displayName":"Pranav Bhavsar","userId":"03342781595821087385"}}},"execution_count":71,"outputs":[]},{"cell_type":"code","source":["uptrend=find_consecutive_up_labels(df_low)\n","downtrend=find_consecutive_down_labels(df_high)"],"metadata":{"id":"LZklJ9t5VHAs","executionInfo":{"status":"ok","timestamp":1726851177138,"user_tz":-330,"elapsed":3,"user":{"displayName":"Pranav Bhavsar","userId":"03342781595821087385"}}},"execution_count":72,"outputs":[]},{"cell_type":"code","source":["def separate_group(df, trend_type):\n","    consecutive_groups = []\n","    current_group = {'x': [], 'y': []}\n","\n","    for i in range(0, len(df) - 1):\n","        if df['Start Timeframe'].iloc[i] not in current_group['x']:\n","            current_group['x'].append(df['Start Timeframe'].iloc[i])\n","        if df['End Timeframe'].iloc[i] not in current_group['x']:\n","            current_group['x'].append(df['End Timeframe'].iloc[i])\n","        if df['Start Price'].iloc[i] not in current_group['y']:\n","            current_group['y'].append(df['Start Price'].iloc[i])\n","        if df['End Price'].iloc[i] not in current_group['y']:\n","            current_group['y'].append(df['End Price'].iloc[i])\n","        if df.iloc[i][\"End Price\"] != df.iloc[i + 1][\"Start Price\"]:\n","            consecutive_groups.append(current_group)\n","            current_group = {'x': [], 'y': []}\n","\n","    current_group['x'].extend([df['Start Timeframe'].iloc[-1], df['End Timeframe'].iloc[-1]])\n","    current_group['y'].extend([df['Start Price'].iloc[-1], df['End Price'].iloc[-1]])\n","    consecutive_groups.append(current_group)\n","\n","    for group in consecutive_groups:\n","        if(trend_type == 'up'):\n","            final_uptrend(group['x'], group['y'])\n","        else:\n","            final_downtrend(group['x'], group['y'])"],"metadata":{"id":"Q3BWgdoYVIc8","executionInfo":{"status":"ok","timestamp":1726851177138,"user_tz":-330,"elapsed":3,"user":{"displayName":"Pranav Bhavsar","userId":"03342781595821087385"}}},"execution_count":73,"outputs":[]},{"cell_type":"code","source":["separate_group(uptrend, 'up')\n","separate_group(downtrend, 'down')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"g_znrWmJWDXT","executionInfo":{"status":"ok","timestamp":1726851178362,"user_tz":-330,"elapsed":424,"user":{"displayName":"Pranav Bhavsar","userId":"03342781595821087385"}},"outputId":"ddff0d17-016c-4416-d971-1d92fa118930"},"execution_count":74,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["def final_uptrend(x_up, y_up):\n","    dates_up = pd.to_datetime(x_up)\n","    if len(dates_up) > 0:\n","        price_up = np.array(y_up)\n","        t = (dates_up - dates_up[0]).days.values\n","        time_frame_up = t.reshape(-1, 1)\n","        model = LinearRegression()\n","        model.fit(time_frame_up, price_up)\n","        slope = model.coef_[0]\n","        c=[]\n","        for i in range(0, len(dates_up)-1):\n","            c.append(price_up[i] - (slope * time_frame_up[i]))\n","\n","        min_c= 100000000000\n","        for i in range(0 , len(c)):\n","            if c[i] < min_c:\n","                min_c = c[i]\n","\n","        price_final_up=[]\n","\n","        for i in range(0, len(dates_up)):\n","            price_final_up.append((slope * time_frame_up[i]) + min_c)\n","\n","        price_final_flat_up = np.concatenate(price_final_up, axis=0)\n","        d_line_up = pd.DataFrame({'Date': dates_up, 'Price': price_up, 'Predicted Price': price_final_flat_up})\n","\n","\n","        fig = go.Figure(data=[go.Candlestick(x=df['Date'],\n","\n","                        open=df['Open'],\n","                        high=df['High'],\n","                        low=df['Low'],\n","                        close=df['Close'])])\n","\n","        trace_line = go.Scatter(x= d_line_up['Date'], y= d_line_up['Predicted Price'] , mode='lines')\n","\n","        fig.add_trace(trace_line)\n","\n","        fig.update_layout(\n","            autosize=False,\n","            width=1000,\n","            height=800,)\n","\n","        fig.update_xaxes(type='category')\n","        fig.show()\n",""],"metadata":{"id":"LVO2bkkTVLIs","executionInfo":{"status":"ok","timestamp":1726851178362,"user_tz":-330,"elapsed":4,"user":{"displayName":"Pranav Bhavsar","userId":"03342781595821087385"}}},"execution_count":75,"outputs":[]},{"cell_type":"code","source":["def final_downtrend(x_down, y_down):\n","    dates_down = pd.to_datetime(x_down)\n","    if len(dates_down) > 0:\n","\n","        price_down = np.array(y_down)\n","        t = (dates_down - dates_down[0]).days.values\n","        time_frame_down = t.reshape(-1, 1)\n","        model = LinearRegression()\n","        model.fit(time_frame_down, price_down)\n","\n","        slope = model.coef_[0]\n","        c=[]\n","\n","        for i in range(0, len(dates_down)-1):\n","\n","            c.append(price_down[i] - (slope * time_frame_down[i]))\n","\n","        max_c= -100000000000\n","\n","        for i in range(0 , len(c)):\n","            if c[i] > max_c:\n","                max_c = c[i]\n","\n","        price_final_down=[]\n","\n","        for i in range(0, len(dates_down)):\n","            price_final_down.append((slope * time_frame_down[i]) + max_c)\n","\n","\n","        price_final_flat_down = np.concatenate(price_final_down, axis=0)\n","\n","        d_line_down = pd.DataFrame({'Date': dates_down, 'Price': price_down, 'Predicted Price': price_final_flat_down})\n","\n","        fig = go.Figure(data=[go.Candlestick(x=df['Date'],\n","\n","                        open=df['Open'],\n","                        high=df['High'],\n","                        low=df['Low'],\n","                        close=df['Close'])])\n","\n","        trace_line = go.Scatter(x= d_line_down['Date'], y= d_line_down['Predicted Price'] , mode='lines')\n","\n","        fig.add_trace(trace_line)\n","\n","        fig.update_layout(\n","            autosize=False,\n","            width=1000,\n","            height=800,)\n","\n","        fig.update_xaxes(type='category')\n","        fig.show()"],"metadata":{"id":"GNJDjb2TVo8M","executionInfo":{"status":"ok","timestamp":1726851178362,"user_tz":-330,"elapsed":4,"user":{"displayName":"Pranav Bhavsar","userId":"03342781595821087385"}}},"execution_count":76,"outputs":[]},{"cell_type":"code","source":["def final_uptrend(x_up, y_up):\n","\n","    dates_up = pd.to_datetime(x_up)\n","    if len(dates_up) > 0 and len(x_up) == len(y_up):\n","\n","        price_up = np.array(y_up)\n","        t = (dates_up - dates_up[0]).days.values\n","        time_frame_up = t.reshape(-1, 1)\n","\n","        model = LinearRegression()\n","        model.fit(time_frame_up, price_up)\n","\n","        slope = model.coef_[0]\n","        c=[]\n","\n","        for i in range(0, len(dates_up)-1):\n","\n","            c.append(price_up[i] - (slope * time_frame_up[i]))\n","\n","        min_c= 100000000000\n","\n","        for i in range(0 , len(c)):\n","            if c[i] < min_c:\n","                min_c = c[i]\n","\n","        price_final_up=[]\n","\n","        for i in range(0, len(dates_up)):\n","            price_final_up.append((slope * time_frame_up[i]) + min_c)\n","\n","        price_final_flat_up = np.concatenate(price_final_up, axis=0)\n","\n","        d_line_up = pd.DataFrame({'Date': dates_up, 'Predicted Price': price_final_flat_up})\n","        up_trend_values = pd.DataFrame({\n","            'Start Date': d_line_up['Date'].iloc[0],\n","            'Start Price': d_line_up['Predicted Price'].iloc[0],\n","            'End Date': d_line_up['Date'].iloc[-1],\n","            'End Price': d_line_up['Predicted Price'].iloc[-1],\n","            'Trend': ['Up'],\n","            })\n","        return up_trend_values\n","\n","def final_downtrend(x_down, y_down):\n","\n","    dates_down = pd.to_datetime(x_down)\n","\n","    if len(dates_down) > 0 and len(x_down) == len(y_down):\n","\n","        price_down = np.array(y_down)\n","        t = (dates_down - dates_down[0]).days.values\n","\n","        time_frame_down = t.reshape(-1, 1)\n","        model = LinearRegression()\n","        model.fit(time_frame_down, price_down)\n","        slope = model.coef_[0]\n","        c=[]\n","\n","        for i in range(0, len(dates_down)-1):\n","\n","            c.append(price_down[i] - (slope * time_frame_down[i]))\n","\n","        max_c= -100000000000\n","\n","        for i in range(0 , len(c)):\n","            if c[i] > max_c:\n","                max_c = c[i]\n","\n","        price_final_down=[]\n","\n","        for i in range(0, len(dates_down)):\n","            price_final_down.append((slope * time_frame_down[i]) + max_c)\n","\n","        price_final_flat_down = np.concatenate(price_final_down, axis=0)\n","\n","        d_line_down = pd.DataFrame({'Date': dates_down, 'Predicted Price': price_final_flat_down})\n","\n","        down_trend_values = pd.DataFrame({\n","            'Start Date': d_line_down['Date'].iloc[0],\n","            'Start Price': d_line_down['Predicted Price'].iloc[0],\n","            'End Date': d_line_down['Date'].iloc[-1],\n","            'End Price': d_line_down['Predicted Price'].iloc[-1],\n","            'Trend': ['Down'],\n","            })\n","        return down_trend_values\n","\n","def separate_group(trend_df, trend_type):\n","    consecutive_groups = []\n","    current_group = {'x': [], 'y': []}\n","    final_trend=pd.DataFrame()\n","    for i in range(0, len(trend_df) - 1):\n","\n","        if trend_df['Start Timeframe'].iloc[i] not in current_group['x']:\n","            current_group['x'].append(trend_df['Start Timeframe'].iloc[i])\n","        if trend_df['End Timeframe'].iloc[i] not in current_group['x']:\n","            current_group['x'].append(trend_df['End Timeframe'].iloc[i])\n","        if trend_df['Start Price'].iloc[i] not in current_group['y']:\n","            current_group['y'].append(trend_df['Start Price'].iloc[i])\n","        if trend_df['End Price'].iloc[i] not in current_group['y']:\n","            current_group['y'].append(trend_df['End Price'].iloc[i])\n","        if trend_df.iloc[i][\"End Timeframe\"] != trend_df.iloc[i + 1][\"Start Timeframe\"]:\n","            consecutive_groups.append(current_group)\n","            current_group = {'x': [], 'y': []}\n","\n","    current_group['x'].extend([trend_df['Start Timeframe'].iloc[-1], trend_df['End Timeframe'].iloc[-1]])\n","    current_group['y'].extend([trend_df['Start Price'].iloc[-1], trend_df['End Price'].iloc[-1]])\n","    consecutive_groups.append(current_group)\n","\n","    for group in consecutive_groups:\n","\n","        if(trend_type == 'up'):\n","            trend_value = final_uptrend(group['x'], group['y'])\n","        else:\n","            trend_value = final_downtrend(group['x'], group['y'])\n","        final_trend=pd.concat([final_trend, trend_value])\n","\n","    return final_trend"],"metadata":{"id":"lteJu3YvVumC","executionInfo":{"status":"ok","timestamp":1726851265470,"user_tz":-330,"elapsed":433,"user":{"displayName":"Pranav Bhavsar","userId":"03342781595821087385"}}},"execution_count":79,"outputs":[]},{"cell_type":"code","source":["def final_uptrend(x_up, y_up):\n","\n","    dates_up = pd.to_datetime(x_up)\n","    if len(dates_up) > 0 and len(x_up) == len(y_up):\n","\n","        price_up = np.array(y_up)\n","        t = (dates_up - dates_up[0]).days.values\n","        time_frame_up = t.reshape(-1, 1)\n","\n","        model = LinearRegression()\n","        model.fit(time_frame_up, price_up)\n","\n","        slope = model.coef_[0]\n","        c=[]\n","\n","        for i in range(0, len(dates_up)-1):\n","\n","            c.append(price_up[i] - (slope * time_frame_up[i]))\n","\n","        min_c= 100000000000\n","\n","        for i in range(0 , len(c)):\n","            if c[i] < min_c:\n","                min_c = c[i]\n","\n","        price_final_up=[]\n","\n","        for i in range(0, len(dates_up)):\n","            price_final_up.append((slope * time_frame_up[i]) + min_c)\n","\n","        price_final_flat_up = np.concatenate(price_final_up, axis=0)\n","\n","        d_line_up = pd.DataFrame({'Date': dates_up, 'Predicted Price': price_final_flat_up})\n","        up_trend_values = pd.DataFrame({\n","            'Start Date': d_line_up['Date'].iloc[0],\n","            'Start Price': d_line_up['Predicted Price'].iloc[0],\n","            'End Date': d_line_up['Date'].iloc[-1],\n","            'End Price': d_line_up['Predicted Price'].iloc[-1],\n","            'Trend': ['Up'],\n","            })\n","        return up_trend_values\n","\n","def final_downtrend(x_down, y_down):\n","\n","    dates_down = pd.to_datetime(x_down)\n","\n","    if len(dates_down) > 0 and len(x_down) == len(y_down):\n","\n","        price_down = np.array(y_down)\n","        t = (dates_down - dates_down[0]).days.values\n","\n","        time_frame_down = t.reshape(-1, 1)\n","        model = LinearRegression()\n","        model.fit(time_frame_down, price_down)\n","        slope = model.coef_[0]\n","        c=[]\n","\n","        for i in range(0, len(dates_down)-1):\n","\n","            c.append(price_down[i] - (slope * time_frame_down[i]))\n","\n","        max_c= -100000000000\n","\n","        for i in range(0 , len(c)):\n","            if c[i] > max_c:\n","                max_c = c[i]\n","\n","        price_final_down=[]\n","\n","        for i in range(0, len(dates_down)):\n","            price_final_down.append((slope * time_frame_down[i]) + max_c)\n","\n","        price_final_flat_down = np.concatenate(price_final_down, axis=0)\n","\n","        d_line_down = pd.DataFrame({'Date': dates_down, 'Predicted Price': price_final_flat_down})\n","\n","        down_trend_values = pd.DataFrame({\n","            'Start Date': d_line_down['Date'].iloc[0],\n","            'Start Price': d_line_down['Predicted Price'].iloc[0],\n","            'End Date': d_line_down['Date'].iloc[-1],\n","            'End Price': d_line_down['Predicted Price'].iloc[-1],\n","            'Trend': ['Down'],\n","            })\n","        return down_trend_values\n","\n","def separate_group(trend_df, trend_type):\n","    consecutive_groups = []\n","current_group = {'x': [], 'y': []}\n","    final_trend=pd.DataFrame() # Removed extra indent\n","    for i in range(0, len(trend)):"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":106},"id":"76LycA9SVyH9","executionInfo":{"status":"error","timestamp":1726859448368,"user_tz":-330,"elapsed":461,"user":{"displayName":"Pranav Bhavsar","userId":"03342781595821087385"}},"outputId":"fb4dfacb-4d74-4d56-bce6-9e9f37649e9c"},"execution_count":85,"outputs":[{"output_type":"error","ename":"IndentationError","evalue":"unexpected indent (<ipython-input-85-51173acf64aa>, line 89)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-85-51173acf64aa>\"\u001b[0;36m, line \u001b[0;32m89\u001b[0m\n\u001b[0;31m    final_trend=pd.DataFrame() # Removed extra indent\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unexpected indent\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"Trxo-1NtWIv5","executionInfo":{"status":"ok","timestamp":1726851178362,"user_tz":-330,"elapsed":3,"user":{"displayName":"Pranav Bhavsar","userId":"03342781595821087385"}}},"execution_count":77,"outputs":[]},{"cell_type":"markdown","source":["asas\n"],"metadata":{"id":"OYk0M7d9Woc7"}},{"cell_type":"code","source":[],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":106},"id":"wn6dYna8WpNy","executionInfo":{"status":"error","timestamp":1726851448840,"user_tz":-330,"elapsed":853,"user":{"displayName":"Pranav Bhavsar","userId":"03342781595821087385"}},"outputId":"8a2b41f2-789c-4fdb-f1e7-614693552817"},"execution_count":81,"outputs":[{"output_type":"error","ename":"IndentationError","evalue":"unindent does not match any outer indentation level (<tokenize>, line 43)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<tokenize>\"\u001b[0;36m, line \u001b[0;32m43\u001b[0m\n\u001b[0;31m    t_n = len(X)-1\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unindent does not match any outer indentation level\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"JOpdL8y4Wrat"},"execution_count":null,"outputs":[]}]}